runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?ggplot2::unit
runApp()
runApp()
runApp()
runApp()
runApp()
ggplot2::unit
?ggplot2::unit
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
sample(23, 3, replace= FALSE)
runApp()
runApp()
xx<- c(1:4, NA)
xxi <- impute(xx)
is.imputed(xxi)
runApp()
nt <- 300
nc <- 700
N <- nt + nc
nmiss <- 0.05 * N
group <- rep(c("Exposed", "Unexposed"), times= c(nt, nc))
height_ft <- c(rnorm(nt, 5.4, .3), rnorm(nc, 5.6, .2))
height_ft[sample(N, nmiss, replace= FALSE)] <- NA
gender <- c(rbinom(nt, 1, .66), rbinom(nc, 1, .5))
gender[gender == 0] <- "Male"
gender[gender == 1] <- "Female"
gender[sample(N, nmiss, replace= FALSE)] <- NA
age <- c(rnorm(nt, 45, 5), rnorm(nc, 50, 10))
age[sample(N, nmiss, replace= FALSE)] <- NA
systolic_bp <- c(rnorm(nt, 115, 5), rnorm(nc, 110, 7))
systolic_bp [sample(N, nmiss, replace= FALSE)] <- NA
mydat <- data.table(group, height_ft, gender, age, systolic_bp)
head(mydat)
describe(mydat)
myvars <- c("age", "gender")
dat <- copy(mydat)
for (varname in myvars) {
if (is.character(dat[[varname]])) {
dat[, eval(varname) := factor(dat[[varname]])]
}
}
dat[, (myvars) := lapply(.SD, function(x) impute(x, fun= mean)),
.SDcols = myvars]
describe(dat)
psForm1 <- group ~ age + gender
psForm2 <- group ~ age + gender + is.imputed(age)
lrm(psForm1, data= dat)
lrm(psForm1, data= mydat)
lrm(psForm2, data= dat)
psForm3 <- group ~  gender + is.imputed(age)
lrm(psForm3, data= dat)
psForm1 <- group ~ age + gender
psForm3 <- group ~  is.imputed(age) + gender
lrm(psForm1, data= dat)
lrm(psForm3, data= dat)
?fit.mult.impute
psForm4 <- group ~ age + gender + I(is.imputed(age))
lrm(psForm4, data= dat)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
dd<- data.table(x= 1:3, y= 4:6)
dd
setkey(dd, x)
dd
dd[c(1,2,4)]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
plot(1:3)
plot(1:3, ylim= 0:1)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
plot(runif(100), runif(100), xlim= 0:1, ylim= my.ylim, type= "n", xaxt= "n")
plot(runif(100), runif(100), type= "n", xaxt= "n")
axis(side=1, at= 0.5, labels = "Hi")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
xx<- rep(c("Y", "N"), 40)
table(xx)
xx<- c(rep("Y", 20), rep("N", 40))
table(xx)
vv<- table(xx)
names(vv)
names(vv)[order(vv, decreasing= TRUE)]
intersect(c(8,5,3), c(3,5))
runApp()
runApp()
x<- rnorm(1100)
hh<- hist(x, plot= FALSE)
hh
barplot(hh$counts)
plot(hh)
shiny::runApp()
hist(NULL)
x<- data.table(a=1:3, b= 4:6)
y<- x[a>5,]
y
nrow(y)
hx<- hist(x[,a])
is.null(hx)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
dd <- data.table(grp= rep(c("Y", "N"), 30), color= sample(c("a","b","c"), 60, replace= TRUE))
dd
hh<- table(dd)
hh
hh<- table(dd[,color], dd[,grp])
hh
str(hh)
mm<- as.matrix(hh(
mm<- as.matrix(hh)
mm
barplot(mm)
barplot(mm, beside= TRUE)
runApp()
hh<- table(dd[,grp], dd[,color])
hh
names(hh)
rownames(hh)
runApp()
runApp()
runApp()
hh
max(hh)
max(hh)[1]
runApp()
runApp()
bb<- stripchart(1:100)
bb
bb<- stripchart(1:100, type= "n")
bb<- stripchart(1:100, plot= FALSE)
seq(0, 0.5, length.out = 2)
cut2(1:00, g=2)
cut2(1:100, g=2)
cut2(1:100, g=2, onlycuts = TRUE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
zones <- matrix(c(
0, 4, 0,
1, 5, 3,
0, 2, 0),
ncol = 3, byrow = TRUE)
layout(zones,
widths  = c(0.4, 4, 0.75),
#heights = c(3, 10, .75)
heights = c(3, 10, 1)
)
layout.show(n=5)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
par(bg)
par("bg")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
nchar("cat1mosfwsepsis")
nchar(c("ab", "cde"))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
par("bty")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
.75*.75
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
lcm
lcm(1:2)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
paste(1, NULL, collapse= " ")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
textInputRow<-function (inputId, label, value = "")
{
div(style="display:inline-block",
tags$label(label, `for` = inputId),
tags$input(id = inputId, type = "text", value = value,class="input-small"))
}
textInputRow(inputId="xlimitsmin", label="x-min", value = 0.0)
textInputRow(inputId="xlimitsmax", label="x-max", value = 0.5)
HTML(paste0(tags$div(style="display:inline-block",
textInput(
"hi",
#NULL,
"Min:",
# make min & max slightly more extreme than rounded min and max in data, so that we don't get accidental pruning using the default values
value= 3,
width= '20%'
)
)))
textInput(
"hi",
#NULL,
"Min:",
# make min & max slightly more extreme than rounded min and max in data, so that we don't get accidental pruning using the default values
value= 3,
width= '20%'
)
HTML(paste0(tags$div(style="display:inline-block",
textInput(
"hi",
#NULL,
"Min:",
# make min & max slightly more extreme than rounded min and max in data, so that we don't get accidental pruning using the default values
value= 3
)
)))
tags$div(style="display:inline-block",
textInput(
"hi",
#NULL,
"Min:",
value= 3
)
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
nt <- 300
nc <- 700
N <- nt + nc
nmiss <- 0.05 * N
group <- rep(c("Exposed", "Unexposed"), times= c(nt, nc))
height_ft <- c(rnorm(nt, 5.4, .3), rnorm(nc, 5.6, .2))
height_ft[sample(N, nmiss, replace= FALSE)] <- NA
gender <- c(rbinom(nt, 1, .66), rbinom(nc, 1, .5))
gender[gender == 0] <- "Male"
gender[gender == 1] <- "Female"
gender[sample(N, nmiss, replace= FALSE)] <- NA
age <- c(rnorm(nt, 45, 5), rnorm(nc, 50, 10))
age[sample(N, nmiss, replace= FALSE)] <- NA
systolic_bp <- c(rnorm(nt, 115, 5), rnorm(nc, 110, 7))
systolic_bp [sample(N, nmiss, replace= FALSE)] <- NA
mydat <- data.table(group, height_ft, gender, age, systolic_bp)
describe(mydat)
lrm(group ~ gender + age, data= mydat)
lrm(group ~ impute(gender) + impute(age), data= mydat)
str(mydat$gender)
mdi <- copy(mydat)
mdi[,gender := factor(gender)]
describe(mdi)
mdi[, gender := impute(gender)]
mdi[, age := impute(age)]
describe(mdi)
lrm(group ~ gender + age, data= mdi)
lrm(group ~ gender + age + I(is.imputed(age)), data= mdi)
mdi[, ii.age := is.imputed(age)]
lrm(group~ gender + age + ii.age, data= mdi)
x<- is.imputed(mdi$age)
lrm(group ~ age + x, data= mdi)
lrm(group ~ age + ii.age, data= mdi)
glm(group ~ age + ii.age, data= mdi, family= 'binomial')
lrm
lrm(group ~ age + I(age < 3), data= mdi)
lrm(group ~ I(age < 3), data= mdi)
lrm(group ~ age + as.factor(is.imputed(age)), data= mdi)
lrm(group ~ age + ii.age, data= mdi)
lrm(group ~ rcs(age) + ii.age, data= mdi)
lrm(group ~ is.imputed(age), data= mdi)
lrm(group ~ age + (is.imputed(age)), data= mdi)
lrm(group ~ I(age) + is.imputed(age), data= mdi)
head(x)
datx <- data.frame(x)
head(datx)
lrm(group ~ age + datx$x, data= mdi)
runApp()
runApp()
runApp()
runApp()
runApp()
