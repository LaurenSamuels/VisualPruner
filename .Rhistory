is.null(hx)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
dd <- data.table(grp= rep(c("Y", "N"), 30), color= sample(c("a","b","c"), 60, replace= TRUE))
dd
hh<- table(dd)
hh
hh<- table(dd[,color], dd[,grp])
hh
str(hh)
mm<- as.matrix(hh(
mm<- as.matrix(hh)
mm
barplot(mm)
barplot(mm, beside= TRUE)
runApp()
hh<- table(dd[,grp], dd[,color])
hh
names(hh)
rownames(hh)
runApp()
runApp()
runApp()
hh
max(hh)
max(hh)[1]
runApp()
runApp()
bb<- stripchart(1:100)
bb
bb<- stripchart(1:100, type= "n")
bb<- stripchart(1:100, plot= FALSE)
seq(0, 0.5, length.out = 2)
cut2(1:00, g=2)
cut2(1:100, g=2)
cut2(1:100, g=2, onlycuts = TRUE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
zones <- matrix(c(
0, 4, 0,
1, 5, 3,
0, 2, 0),
ncol = 3, byrow = TRUE)
layout(zones,
widths  = c(0.4, 4, 0.75),
#heights = c(3, 10, .75)
heights = c(3, 10, 1)
)
layout.show(n=5)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
par(bg)
par("bg")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
nchar("cat1mosfwsepsis")
nchar(c("ab", "cde"))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
par("bty")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
.75*.75
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
lcm
lcm(1:2)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
paste(1, NULL, collapse= " ")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
textInputRow<-function (inputId, label, value = "")
{
div(style="display:inline-block",
tags$label(label, `for` = inputId),
tags$input(id = inputId, type = "text", value = value,class="input-small"))
}
textInputRow(inputId="xlimitsmin", label="x-min", value = 0.0)
textInputRow(inputId="xlimitsmax", label="x-max", value = 0.5)
HTML(paste0(tags$div(style="display:inline-block",
textInput(
"hi",
#NULL,
"Min:",
# make min & max slightly more extreme than rounded min and max in data, so that we don't get accidental pruning using the default values
value= 3,
width= '20%'
)
)))
textInput(
"hi",
#NULL,
"Min:",
# make min & max slightly more extreme than rounded min and max in data, so that we don't get accidental pruning using the default values
value= 3,
width= '20%'
)
HTML(paste0(tags$div(style="display:inline-block",
textInput(
"hi",
#NULL,
"Min:",
# make min & max slightly more extreme than rounded min and max in data, so that we don't get accidental pruning using the default values
value= 3
)
)))
tags$div(style="display:inline-block",
textInput(
"hi",
#NULL,
"Min:",
value= 3
)
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
nt <- 300
nc <- 700
N <- nt + nc
nmiss <- 0.05 * N
group <- rep(c("Exposed", "Unexposed"), times= c(nt, nc))
height_ft <- c(rnorm(nt, 5.4, .3), rnorm(nc, 5.6, .2))
height_ft[sample(N, nmiss, replace= FALSE)] <- NA
gender <- c(rbinom(nt, 1, .66), rbinom(nc, 1, .5))
gender[gender == 0] <- "Male"
gender[gender == 1] <- "Female"
gender[sample(N, nmiss, replace= FALSE)] <- NA
age <- c(rnorm(nt, 45, 5), rnorm(nc, 50, 10))
age[sample(N, nmiss, replace= FALSE)] <- NA
systolic_bp <- c(rnorm(nt, 115, 5), rnorm(nc, 110, 7))
systolic_bp [sample(N, nmiss, replace= FALSE)] <- NA
mydat <- data.table(group, height_ft, gender, age, systolic_bp)
describe(mydat)
lrm(group ~ gender + age, data= mydat)
lrm(group ~ impute(gender) + impute(age), data= mydat)
str(mydat$gender)
mdi <- copy(mydat)
mdi[,gender := factor(gender)]
describe(mdi)
mdi[, gender := impute(gender)]
mdi[, age := impute(age)]
describe(mdi)
lrm(group ~ gender + age, data= mdi)
lrm(group ~ gender + age + I(is.imputed(age)), data= mdi)
mdi[, ii.age := is.imputed(age)]
lrm(group~ gender + age + ii.age, data= mdi)
x<- is.imputed(mdi$age)
lrm(group ~ age + x, data= mdi)
lrm(group ~ age + ii.age, data= mdi)
glm(group ~ age + ii.age, data= mdi, family= 'binomial')
lrm
lrm(group ~ age + I(age < 3), data= mdi)
lrm(group ~ I(age < 3), data= mdi)
lrm(group ~ age + as.factor(is.imputed(age)), data= mdi)
lrm(group ~ age + ii.age, data= mdi)
lrm(group ~ rcs(age) + ii.age, data= mdi)
lrm(group ~ is.imputed(age), data= mdi)
lrm(group ~ age + (is.imputed(age)), data= mdi)
lrm(group ~ I(age) + is.imputed(age), data= mdi)
head(x)
datx <- data.frame(x)
head(datx)
lrm(group ~ age + datx$x, data= mdi)
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
grepl("ei", c("a", "b", "hei"))
runApp()
grepl("^ei", c("a", "b", "hei"))
grepl("^hei", c("a", "b", "hei"))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
helpText
runApp()
runApp()
runApp()
setdiff(1:7, 5:10)
setdiff(1:4, 1:4)
runApp()
TRUE & 0
TRUE & 2
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
#######
runApp()
##########
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
for (i in 1:0) print i
for (i in 1:0) print( i)
for (i in 1:NULL) print( i)
length(NULL)
seq_along(NULL)
for(i in seq_along(NULL)) print(i)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
x<- data.table(a=1:3, b=4:6)
x
y <- data.table(x[["b"]])
y
y[ , V1 := 7:9]
y
x
x<- data.table("a"=1:3, b=4:6)
x
runApp()
runApp()
runApp()
x <- data.table("a" := 1:3)
x<- data.table(a=1:3, b= 4:6)
y<- data.table(x[["a"]])
y
y<- data.table(vv<-x[["a"]])
y
y<- data.table(vv=x[["a"]])
y
runApp()
y
y[, vv:= 4:6]
y
x
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
#############
runApp()
####################
runApp(display.mode = "showcase")
######################
# 12:03
runApp()
runApp()
if(NULL)
)
if (NULL) print(3)
#########12:19
runApp()
runApp()
runApp()
#######12:33
runApp()
x <- list(a= 1, b=2)
x
x[["c"]]
runApp()
#
#
######
runApp()
###$$
runApp()
runApp()
##ooooooo
runApp()
runApp()
runApp()
names(NULL)
unique(c(1:3, NULL))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
