shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
x<-3
x<-3
eval(x)
eval("x)
eval("x")
eval(substitute("x"))
eval(get("x"))
get("x")
runApp()
runApp()
runApp()
vv<- "x"
get(vv)
vv<- "y")
vv<- "y"
get(vv)
vv<- c(3, NA, 4)
is.na(vv) | vv == 4
vv[is.na(vv) | vv == 4]
vv[vv == 4 | is.na(vv)]
vv[vv == 4]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
fileInput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
library(ggplot2)
library(rms)
library(data.table)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
if(NULL)
runApp()
runApp()
runApp()
!NULL
if(is.null(XX)) print("hi")
XX<- NULL
XX
if(is.null(XX)) print("hi")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
* On Specify tab, make the appearance of the plot-related text and checkbox conditional (i.e. they should appear only after scores have been estimated). Same for the plots?
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
X = data.table(grp = c("a", "a", "b",
"b", "b", "c", "c"), foo = 1:7)
setkey(X, grp)
Y = data.table(c("b", "c"), bar = c(4, 2))
X
#    grp foo
# 1:   a   1
# 2:   a   2
# 3:   b   3
# 4:   b   4
# 5:   b   5
# 6:   c   6
# 7:   c   7
Y
#    V1 bar
# 1:  b   4
# 2:  c   2
x[Y]
X[Y]
Y[X]
z <- 1:2
cbind(Y, z)
runApp()
runApp()
shiny::runApp()
runApp()
c(NULL, NULL)
unique(c(1, 1, 2, NULL))
runApp()
runApp()
runApp()
runApp()
vv<- c(1:8, NA)
impute(vv)
bb<- c('a', 'b', 'c', NA)
impute(bb)
bbf <- factor(bb)
impute(bbf)
impute(bbf, fun= 'mean')
impute(bbf, fun= mean)
impute(bb, fun= mean)
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
!NULL
runApp()
runApp()
#########
runApp()
##***###
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
####
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
vv<- factor(c('a','b', 'b'))
vv
is.character(vv)
is.factor(vv)
is.numeric(vv)
str(vv)
class(vv)
ff<- factor(c(1, 2, 1))
ff
is.numeric(ff)
is.character(ff)
is.factor(ff)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
d1 <- data.table(x= 1:3, y= 4:6, z= 5:7)
setkey(d1, x)
d1
d2 <- data.table(x= 2:4, y= 8:10, w= 5:7)
setkey(d2, x)
d2
d1[d2]
merge(d1, d2, by= "x")
d3<- copy(d1)
str(d3)
runApp()
runApp()
runApp()
runApp()
runApp()
help(":=")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(ggExtra)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(gridExtra)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?ggplot2::unit
runApp()
runApp()
runApp()
runApp()
runApp()
ggplot2::unit
?ggplot2::unit
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
