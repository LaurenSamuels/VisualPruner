#
#
######
runApp()
###$$
runApp()
runApp()
##ooooooo
runApp()
runApp()
runApp()
names(NULL)
unique(c(1:3, NULL))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
options(shiny.reactlog=TRUE)
options(shiny.maxRequestSize)
options("shiny.maxRequestSize")
getOption("shiny.maxRequestSize")
runApp()
showReactLog()
runApp()
showReactLog()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
as.formula(NULL)
runApp()
runApp()
#####!
runApp()
seq_along(NULL)
for(i in seq_along(NULL)) print(i)
#######5555
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
unique(c(1,2,NA))
unique(na.omit(c(1,2,NA)))
shiny::runApp()
runApp()
runApp()
runApp()
###########
runApp()
runApp()
intersect(NULL, NULL)
for(i in NULL) print(i)
for(i in character(0)) print(i)
for(i in seq_along(character(0))) print(i)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
tags$code
tags$code("hi")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?HTML
el <- div(HTML("I like <u>turtles</u>"))
cat(as.character(el))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
brushOpts
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
grepl("linux", "x86_64-pc-linux-gnu (64-bit)", fixed= TRUE)
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
set.seed(3517)
nt <- 300
nc <- 700
N <- nt + nc
nmiss <- 0.05 * N
exposed <- rep(c("Yes", "No"), times= c(nt, nc))
height_ft <- c(rnorm(nt, 5.4, .3), rnorm(nc, 5.6, .2))
height_ft[sample(N, nmiss, replace= FALSE)] <- NA
gender <- c(
sample(0:2, nt, replace= TRUE, prob= c(.546, .451, .003)),
sample(0:2, nc, replace= TRUE, prob= c(.506, .491, .003))
)
gender[gender == 0] <- "Male"
gender[gender == 1] <- "Female"
gender[gender == 2] <- "Other"
gender[sample(N, nmiss, replace= FALSE)] <- NA
age <- c(rnorm(nt, 45, 5), rnorm(nc, 50, 10))
age[sample(N, nmiss, replace= FALSE)] <- NA
# Blood pressure is unrelated to tx in theory
#systolic_bp <- c(rnorm(nt, 115, 5), rnorm(nc, 110, 7))
systolicBP <- rnorm(N, 115, 5)
systolicBP [sample(N, nmiss, replace= FALSE)] <- NA
mydat <- data.table(exposed, height_ft, gender, age, systolicBP)
head(mydat)
myfit <- lrm(exposed~ rcs(age) + rcs(height_ft) + rcs(systolicBP) + gender, data= mydat)
myfit
runApp()
runApp()
runApp()
library(rms)
nt <- 300
nc <- 700
N <- nt + nc
nmiss <- 0.05 * N
exposed <- rep(c("Yes", "No"), times= c(nt, nc))
height_ft <- c(rnorm(nt, 5.4, .3), rnorm(nc, 5.6, .2))
height_ft[sample(N, nmiss, replace= FALSE)] <- NA
gender <- c(
sample(0:2, nt, replace= TRUE, prob= c(.546, .451, .003)),
sample(0:2, nc, replace= TRUE, prob= c(.506, .491, .003))
)
gender[gender == 0] <- "Male"
gender[gender == 1] <- "Female"
gender[gender == 2] <- "Other"
gender[sample(N, nmiss, replace= FALSE)] <- NA
age <- c(rnorm(nt, 45, 5), rnorm(nc, 50, 10))
age[sample(N, nmiss, replace= FALSE)] <- NA
# Blood pressure is unrelated to tx in theory
#systolic_bp <- c(rnorm(nt, 115, 5), rnorm(nc, 110, 7))
systolicBP <- rnorm(N, 115, 5)
systolicBP [sample(N, nmiss, replace= FALSE)] <- NA
mydat <- data.table(exposed, height_ft, gender, age, systolicBP)
#tmpfit <- lrm(exposed ~ rcs(age) + rcs(height_ft) + rcs(systolicBP) + gender, data= mydat)
#tmplogit <- tmpfit$linear.predictors
#tmpprob <- exp(tmplogit) / (1 + exp(tmplogit))
#tmpbinom <- rbinom(N, 1, tmpprob)
#mydat[, exposed := ifelse(tmpbinom == 1, "Yes", "No")]
ggplot(data= mydat, aes(x= gender, colour= exposed)) + geom_bar()
mydat <- data.table(exposed, height_ft, gender, age, systolicBP)
library(data.table)
mydat <- data.table(exposed, height_ft, gender, age, systolicBP)
ggplot(data= mydat, aes(x= gender, colour= exposed)) + geom_bar()
ggplot(data= mydat, aes(x= gender, fill= exposed)) + geom_bar(position = "dodge")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
cars.lo <- loess(dist ~ speed, cars)
predict(cars.lo, data.frame(speed = seq(5, 30, 1)), se = TRUE)
plot(cars.lo)
runApp()
require(graphics)
with(cars, scatter.smooth(speed, dist))
require(graphics)
with(cars, plot(speed, dist))
require(graphics)
with(cars, loess.smooth(speed, dist))
require(graphics)
with(cars, lines(loess.smooth(speed, dist)))
runApp()
runApp()
####
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
1 - (.75+.1+.01)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
746+252+002
506+492+2
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
par("oma")
par("mar")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
* Add button to select all vars?
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
x <- data.table(a= 1:3, b= c(NA, 4, 2), d= 8:10)
setkey(x, a)
y <- copy(x)
y[, b:= 11:13]
x[y]
y <- rbind(y, list(4, 5, 6))
y
x[y]
y[x]
x
setkey(x, a)
setkey(y,a)
x[y]
y[x]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
y
y[3:5]
bb<-y[3:5]
str(bb)
bbo<- na.omit(bb)
str(bbo)
bbo
runApp()
runApp()
y
y[.(3:6)]
dd<- data.table(a=c('d', 'e', 'f'), b= 3:5)
setkey(dd, a)
dd
dd[c("e", "f")]
dd[c("e", "f", "g")]
dd<- data.table(a=8:10, b= 3:5)
setkey(dd, a)
dd[1:3]
dd[.(1:3)]
dd<- data.table(a=as.character(8:10), b= 3:5)
setkey(dd, a)
dd
dd[3:6]
dd[.(3:6)]
paste0("is", 1:4)
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
mydat <- fread("/Users/LRS/Documents/VisualPruner/data/rhcMOD.csv",
sep= ",",
header= TRUE,
data.table= TRUE
)
dat2 <- mydat[((is.na(cat1)) | (cat1 == 'ARF' | cat1 == 'CHF' | cat1 == 'Cirrhosis' | cat1 == 'Coma' | cat1 == 'COPD' | cat1 == 'Lung Cancer' | cat1 == 'MOSF w/Malignancy' | cat1 == 'MOSF w/Sepsis')) &
((is.na(cat2)) | (cat2 == 'Cirrhosis' | cat2 == 'Colon Cancer' | cat2 == 'Coma' | cat2 == 'Lung Cancer' | cat2 == 'MOSF w/Malignancy' | cat2 == 'MOSF w/Sepsis')) &
((is.na(age)) | (age >= 18.04 & age <= 80)),]
dim(dat2)
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
rbinom(1, 10, .4)
# Chunk 1: setup1
knitr::opts_chunk$set(
comment = NA,
echo    = TRUE,
results = 'markup'
)
# Chunk 2: setup2
rm(list= ls())
library(rms)
library(data.table)
# Chunk 3: makedat
N <- 100
dat <- data.table(
x1 = rnorm(N),
x2 = rnorm(N),
exposed = rbinom(N, 1, 0.7)
)
dat[1:15, x1 := NA]
dat[, x1.imputed := impute(x1)]
describe(dat)
fit1 <- lrm(exposed ~ x1 + x2 + is.na(x1))
fit1 <- lrm(exposed ~ x1 + x2 + is.na(x1), data= dat)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
27 %% 5
5-2
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
6 %% (6 %% 3)
6%%3
6 %% 0
runApp()
4 %% 3
4 %% 7
3 %% 4
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
cat(NULL)
runApp()
as.formula("NULL")
eval("NULL")
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
* Refactor the code for the covariate graphs. At this point some of the datasets are getting made multiple times. Make a list instead.
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(data.table)
?merge.data.table
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
?runGitHub
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
?impute
runApp()
runApp()
runApp()
library(shiny)
install.packages(c("shiny", "rms", "data.table", "survey", "tableone"))
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
install.packages(c("data.table", "DBI", "digest", "htmlTable", "jsonlite", "Matrix", "mgcv", "mvtnorm", "nlme", "RcppEigen", "SparseM", "stringr"))
install.packages("Matching")
install.packages("psych")
library(psych)
?describe.by
