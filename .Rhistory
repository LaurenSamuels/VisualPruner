runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
* Add button to select all vars?
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
x <- data.table(a= 1:3, b= c(NA, 4, 2), d= 8:10)
setkey(x, a)
y <- copy(x)
y[, b:= 11:13]
x[y]
y <- rbind(y, list(4, 5, 6))
y
x[y]
y[x]
x
setkey(x, a)
setkey(y,a)
x[y]
y[x]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
y
y[3:5]
bb<-y[3:5]
str(bb)
bbo<- na.omit(bb)
str(bbo)
bbo
runApp()
runApp()
y
y[.(3:6)]
dd<- data.table(a=c('d', 'e', 'f'), b= 3:5)
setkey(dd, a)
dd
dd[c("e", "f")]
dd[c("e", "f", "g")]
dd<- data.table(a=8:10, b= 3:5)
setkey(dd, a)
dd[1:3]
dd[.(1:3)]
dd<- data.table(a=as.character(8:10), b= 3:5)
setkey(dd, a)
dd
dd[3:6]
dd[.(3:6)]
paste0("is", 1:4)
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
mydat <- fread("/Users/LRS/Documents/VisualPruner/data/rhcMOD.csv",
sep= ",",
header= TRUE,
data.table= TRUE
)
dat2 <- mydat[((is.na(cat1)) | (cat1 == 'ARF' | cat1 == 'CHF' | cat1 == 'Cirrhosis' | cat1 == 'Coma' | cat1 == 'COPD' | cat1 == 'Lung Cancer' | cat1 == 'MOSF w/Malignancy' | cat1 == 'MOSF w/Sepsis')) &
((is.na(cat2)) | (cat2 == 'Cirrhosis' | cat2 == 'Colon Cancer' | cat2 == 'Coma' | cat2 == 'Lung Cancer' | cat2 == 'MOSF w/Malignancy' | cat2 == 'MOSF w/Sepsis')) &
((is.na(age)) | (age >= 18.04 & age <= 80)),]
dim(dat2)
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
rbinom(1, 10, .4)
# Chunk 1: setup1
knitr::opts_chunk$set(
comment = NA,
echo    = TRUE,
results = 'markup'
)
# Chunk 2: setup2
rm(list= ls())
library(rms)
library(data.table)
# Chunk 3: makedat
N <- 100
dat <- data.table(
x1 = rnorm(N),
x2 = rnorm(N),
exposed = rbinom(N, 1, 0.7)
)
dat[1:15, x1 := NA]
dat[, x1.imputed := impute(x1)]
describe(dat)
fit1 <- lrm(exposed ~ x1 + x2 + is.na(x1))
fit1 <- lrm(exposed ~ x1 + x2 + is.na(x1), data= dat)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
27 %% 5
5-2
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
6 %% (6 %% 3)
6%%3
6 %% 0
runApp()
4 %% 3
4 %% 7
3 %% 4
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
cat(NULL)
runApp()
as.formula("NULL")
eval("NULL")
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
* Refactor the code for the covariate graphs. At this point some of the datasets are getting made multiple times. Make a list instead.
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(data.table)
?merge.data.table
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
?runGitHub
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
?impute
runApp()
runApp()
runApp()
library(shiny)
install.packages(c("shiny", "rms", "data.table", "survey", "tableone"))
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
install.packages(c("data.table", "DBI", "digest", "htmlTable", "jsonlite", "Matrix", "mgcv", "mvtnorm", "nlme", "RcppEigen", "SparseM", "stringr"))
install.packages("Matching")
install.packages("psych")
library(psych)
?describe.by
library(shiny)
?checkboxGroupInput
version(shiny)
versionInfo(shiny)
install.packages(c("assertthat", "boot", "cluster", "curl", "data.table", "DBI", "dtplyr", "foreign", "formatR", "jsonlite", "lattice", "lme4", "markdown", "MASS", "plotly", "psych", "quantreg", "Rcpp", "RcppEigen", "rmarkdown", "rpart", "shiny", "sourcetools", "SparseM", "stringi", "survival", "tibble", "viridis", "viridisLite", "zoo"))
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
req
length(NULL)
runApp()
runApp()
setwd("~/Documents/VisualPruner")
shiny::runApp()
runApp()
runApp()
setwd("~/Documents/VisualPruner")
shiny::runApp()
shiny::runApp(display.mode="showcase")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
req
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?req
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
library(rms)
library(data.table)
library(survey)
library(tableone)
runApp()
?CreateTableOne
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
library(rms)
?lrm
runApp()
form
runApp()
runApp()
runApp()
runApp()
###
runApp()
?Glm
qlogis(.75)
runApp()
plogis(2.4)
runApp()
runApp()
runApp()
runApp()
set.seed(3517)
nt <- 300
nc <- 700
N <- nt + nc
nmiss <- 0.05 * N
exposed <- rep(c("Yes", "No"), times= c(nt, nc))
# Tx group is older on average
age <- c(rnorm(nt, 53, 8), rnorm(nc, 45, 8))
# Tx group is less spread out in terms of height
height_ft <- c(rnorm(nt, 5.6, .15), rnorm(nc, 5.6, .3))
height_ft[sample(N, nmiss, replace= FALSE)] <- NA
# Blood pressure is more likely to be missing in the treated group
systolicBP <- rnorm(N, 115, 5)
systolicBP[sample(nt, nmiss * 3/4, replace= FALSE)] <- NA
systolicBP[nt + sample(nc, nmiss * 1/4, replace= FALSE)] <- NA
# Tx group has higher proportion of males
gender <- c(
sample(0:2, nt, replace= TRUE, prob= c(.746, .252, .002)),
sample(0:2, nc, replace= TRUE, prob= c(.506, .492, .002))
)
gender[gender == 0] <- "Male"
gender[gender == 1] <- "Female"
gender[gender == 2] <- "Other"
# Hardly any current smokers in tx group
smoker <- c(
sample(0:2, nt, replace= TRUE, prob= c(.895, .10, .005)),
sample(0:2, nc, replace= TRUE, prob= c(.75, .05, .2))
)
smoker[smoker == 0] <- "Never"
smoker[smoker == 1] <- "Former"
smoker[smoker == 2] <- "Current"
smoker[sample(N, nmiss, replace= FALSE)] <- NA
# ABO is unrelated
ABO <- c(
rep(c('O', 'A', 'B', 'AB'),
times= c(.44, .42, .10, .04) * nt),
rep(c('O', 'A', 'B', 'AB'),
times= c(.44, .42, .10, .04) * nc)
)
mydat <- data.table(exposed, age, height_ft, systolicBP,
gender, smoker, ABO)
str(mydat)
mydat$exposed.factor <- factor(mydat$exposed)
f1 <- lrm(exposed.factor ~ age + gender, data= mydat)
f1
f2 <- Glm(exposed.factor ~ age + gender, data= mydat, family= binomial(link= "probit"))
f2
f2 <- Glm(exposed.factor ~ age + factor(gender), data= mydat, family= binomial(link= "probit"))
mydat$gender.factor <- factor(mydat$gender)
f2 <- Glm(exposed.factor ~ age + gender.factor, data= mydat, family= binomial(link= "probit"))
f2
str(mydat)
runApp()
runApp()
?glm
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(data.table)
?merge.data.table
library(dplyr)
runApp()
runApp()
runApp()
runApp()
?dplyr::inner_join
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
?lrm
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
strsplit(NULL, "-")
runApp()
runApp()
runApp()
runApp()
install.packages("twang")
library(twang)
?ps
?`gbm-package`
library(gbm)
?`gbm-package`
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?selectizeInput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?setkey
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
?shiny::checkboxGroupInput
shiny::runApp()
runApp()
runApp()
runApp()
q
?shiny::req
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?shiny::local
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
